C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MG127
OBJECT MODULE PLACED IN .\MG127.obj
COMPILER INVOKED BY: C:\Keil_v5c51\C51\BIN\C51.EXE ..\user\MG127.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\MG127.lst) OBJECT(.\MG127.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    :MG127.c
   4            * @author  :MG Team
   5            * @version :V1.0
   6            * @date
   7            * @brief
   8            ******************************************************************************
   9          ***/
  10          
  11          /* Includes ------------------------------------------------------------------*/
  12          //#include "Includes.h"
  13          #include "HC89F0650.h"
  14          #include "SPI.h"
  15          #include "MG127.h"
  16          
  17          /* Private typedef -----------------------------------------------------------*/
  18          /* Private define ------------------------------------------------------------*/
  19          typedef unsigned char uint8_t;
  20          typedef unsigned int uint32_t;
  21          
  22          
  23          /* Private macro -------------------------------------------------------------*/
  24          #define LEN_BLE_ADDR 6
  25          
  26          /* Private variables ---------------------------------------------------------*/
  27          unsigned short tick;
  28          u8 txcnt = 0;
  29          u8 rxcnt = 0;
  30          unsigned char rx_buf[39]; //include header(2B)+mac(6B)+data(max31B), for rx application
  31          unsigned char iot_buf[39];
  32          
  33          //BLE ADV_data, maxlen=31
  34          #define LEN_DATA 30
  35          u8 adv_data[LEN_DATA] = {0x02,0x01,0x04,
  36                                  0x1a,0xff,0x4c,0x00,0x02,0x15,
  37                                  0xfd,0xa5,0x06,0x93,0xa4,0xe2,
  38                                  0x4f,0xb1,0xaf,0xcf,0xc6,0xeb,
  39                                  0x07,0x64,0x78,0x25, 0x27,0x32,
  40                                  0x52,0xa8, 0xCA};
  41          
  42          #if 0
              #define LEN_DATA 30
              code u8 adv_data[LEN_DATA] = {
                                              0x02,0x01,0x06,
                                              0x03,0x02,0xf0,0xff,
                                              0x16,0xff,0x48,0x43,0x2d,0x30,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x
             -00,0x00,0x00
                                              //0x05,0x12,0x06,0x00,0x0c,0x00,
                                              //0x02,0x0a,0x04,
                                              //0x06,0x09,0x48,0x43,0x2d,0x30,0x38
                                              };
              #endif
  53          
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 2   

  54          void BLE_Set_rxtxcnt(u8 tx_cnt, u8 rx_cnt)
  55          {
  56   1              txcnt = tx_cnt;         //txcnt=0 is for rx only application
  57   1              rxcnt = rx_cnt;         //rxcnt=0 is for tx only application
  58   1      }
  59          
  60          /* Private function prototypes -----------------------------------------------*/
  61          void BLE_Do_Cal(void);
  62          
  63          
  64          /*******************************************************************************
  65          * Function   :          BLE_Mode_Sleep
  66          * Parameter  :          void
  67          * Returns    :          void
  68          * Description:
  69          * Note:      :          BLE enter sleep mode. current: 3ua
  70          *******************************************************************************/
  71          void BLE_Mode_Sleep(void)
  72          {
  73   1          u8  temp0[4] = {0x02, 0xff, 0xff, 0xff};
  74   1      
  75   1          //temp0[0] = 0x02;
  76   1          //temp0[1] = 0xff;
  77   1          //temp0[2] = 0xff;
  78   1          //temp0[3] = 0xff;
  79   1      
  80   1          SPI_Write_Buffer(SLEEP_WAKEUP,temp0,4);
  81   1      }
  82          
  83          /*******************************************************************************
  84          * Function   :          BLE_Mode_Wakeup
  85          * Parameter  :          void
  86          * Returns    :          void
  87          * Description:
  88          * Note:      :          BLE reg:0x00--0x1f. write operation must or 0x20
  89          *******************************************************************************/
  90          void BLE_Mode_Wakeup(void)
  91          {
  92   1          SPI_Write_Reg(SLEEP_WAKEUP|0x20, 0x01);
  93   1      }
  94          
  95          
  96          void BLE_Mode_PwrUp(void)
  97          {
  98   1          SPI_Write_Reg(0X50, 0x51);
  99   1          SPI_Write_Reg(0X20, 0x7a); //pwr up
 100   1      
 101   1          SPI_Write_Reg(0x50, 0x53);
 102   1          SPI_Write_Reg(0X35, 0x00);
 103   1          SPI_Write_Reg(0x3d, 0x1e);
 104   1      
 105   1          BLE_Do_Cal();
 106   1          SPI_Write_Reg(0x50, 0x56);
 107   1          BLE_Mode_Sleep();
 108   1      }
 109          
 110          
 111          void BLE_Mode_PwrDn(void)
 112          {
 113   1          unsigned char temp[2] = {0x81, 0x02};
 114   1      
 115   1          SPI_Write_Reg(0X50, 0x51);
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 3   

 116   1          SPI_Write_Reg(0X20, 0x78); //pwr down
 117   1      
 118   1          SPI_Write_Reg(0X50, 0x53);
 119   1          SPI_Write_Reg(0x3d, 0x18);
 120   1          SPI_Write_Reg(0X35, 0x01);  //tm
 121   1      
 122   1          //temp[0] = 0x81;
 123   1          //temp[1] = 0x02;
 124   1          SPI_Write_Buffer(0x13, temp, 2);
 125   1          SPI_Write_Reg(0X3e, 0xa0);
 126   1      
 127   1          SPI_Write_Reg(0X50, 0x56);
 128   1      }
 129          
 130          
 131          /*******************************************************************************
 132          * Function   :          BLE_Set_StartTime
 133          * Parameter  :          u32
 134          * Returns    :          void
 135          * Description:
 136          * Note:      :
 137          *******************************************************************************/
 138          void BLE_Set_StartTime(u32 htime)
 139          {
 140   1          u8 temp0[3];
 141   1      
 142   1          temp0[0] = htime & 0xFF;
 143   1          temp0[1] = (htime>>8) & 0xFF;
 144   1          temp0[2] = (htime>>16) & 0xFF;
 145   1      
 146   1          SPI_Write_Buffer(START_TIME,temp0,3);
 147   1      }
 148          
 149          
 150          /*******************************************************************************
 151          * Function   :          BLE_Set_TimeOut
 152          * Parameter  :          u32 data_us
 153          * Returns    :          void
 154          * Description:      TX/RX timeout .unit:us
 155          * Note:      :
 156          *******************************************************************************/
 157          void BLE_Set_TimeOut(u32 data_us)
 158          {
 159   1          u8 temp0[3];
 160   1      
 161   1          temp0[0] = data_us & 0xff;
 162   1          temp0[1] = (data_us >> 8) & 0xff;
 163   1          temp0[2] = (data_us >> 16) & 0xff;
 164   1      
 165   1          SPI_Write_Buffer(TIMEOUT, temp0, 3);
 166   1      }
 167          
 168          #if 0
              /*******************************************************************************
              * Function   :          BLE_Set_Xtal
              * Parameter  :          u8
              * Returns    :          void
              * Description:
              * Note:      :
              *******************************************************************************/
              void BLE_Set_Xtal(u8 on_flag)
              {
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 4   

                  SPI_Write_Reg(0x50, 0x53);
                  SPI_Write_Reg(0x3D, 0x18|(on_flag<<2));
                  SPI_Write_Reg(0x50, 0x56);
              }
              #endif
 183          
 184          static void BLE_Get_Pdu(u8 *ptr, u8 *len)
 185          {
 186   1          u8 hdr_type;
 187   1          u8 len_tmp;
 188   1          u8 bank_buf[6];
 189   1      
 190   1          SPI_Read_Buffer(ADV_HDR_RX, bank_buf, 2);
 191   1      
 192   1          *len = bank_buf[1] + 2;
 193   1          ptr[0] = bank_buf[0];
 194   1          ptr[1] = bank_buf[1];
 195   1      
 196   1          hdr_type = bank_buf[0] & 0xF;
 197   1          len_tmp = bank_buf[1];
 198   1          switch(hdr_type){
 199   2              case ADV_IND:  //advA+0~31
 200   2              case ADV_NONCONN_IND:
 201   2              case ADV_SCAN_IND:
 202   2              //case ADV_SCAN_RSP:
 203   2                  SPI_Read_Buffer(INITA_RX, &ptr[2], LEN_BLE_ADDR);  //INITA
 204   2                  len_tmp -= LEN_BLE_ADDR;
 205   2                  break;
 206   2      /*
 207   2              case ADV_DIRECT_IND:  //advA+InitA
 208   2                  if(len_tmp == 12){
 209   2                      SPI_Read_Buffer(ADVA_RX, &ptr[2], LEN_BLE_ADDR);  //advA
 210   2                      len_tmp -= LEN_BLE_ADDR;
 211   2                      SPI_Read_Buffer(INITA_RX, &ptr[2+LEN_BLE_ADDR], LEN_BLE_ADDR);  //INITA
 212   2                      len_tmp -= LEN_BLE_ADDR;
 213   2                  }
 214   2                  len_tmp = 0;
 215   2                  break;
 216   2              case ADV_SCAN_REQ:  //scanA + advA
 217   2                  if(len_tmp == 12){
 218   2                      SPI_Read_Buffer(INITA_RX, &ptr[2], LEN_BLE_ADDR);  //INITA
 219   2                      len_tmp -= LEN_BLE_ADDR;
 220   2                      SPI_Read_Buffer(ADVA_RX, &ptr[2+LEN_BLE_ADDR], LEN_BLE_ADDR);  //advA
 221   2                      len_tmp -= LEN_BLE_ADDR;
 222   2                  }
 223   2                  len_tmp = 0;
 224   2                  break;
 225   2              case ADV_CONN_REQ:  //InitA + advA + LL(22B)
 226   2                  if(len_tmp == 34){
 227   2                      SPI_Read_Buffer(INITA_RX, &ptr[2], LEN_BLE_ADDR);  //INITA
 228   2                      SPI_Read_Buffer(ADVA_RX, &ptr[2+LEN_BLE_ADDR], LEN_BLE_ADDR);  //advA
 229   2                      SPI_Read_Buffer(R_RX_PAYLOAD, &ptr[2+LEN_BLE_ADDR+LEN_BLE_ADDR], 22);
 230   2                  }
 231   2                  len_tmp = 0;
 232   2                  break;
 233   2      */
 234   2              default:
 235   2                  len_tmp = 0;
 236   2                  break;
 237   2          }
 238   1      
 239   1          if(len_tmp > 0){
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 5   

 240   2              SPI_Read_Buffer(R_RX_PAYLOAD, &ptr[2+LEN_BLE_ADDR], len_tmp);
 241   2          }
 242   1      }
 243          
 244          
 245          #define TXGAIN_DEF 0x12
 246          
 247          void BLE_Do_Cal()  //calibration
 248          {
 249   1          u8 data_buf[2];
 250   1      
 251   1          SPI_Write_Reg(0x3F, 0x03);
 252   1          do{
 253   2              data_buf[0] = SPI_Read_Reg(0x1F);
 254   2          }while(data_buf[0]&0x03);
 255   1      
 256   1          SPI_Write_Reg(0x3F, 0x03);
 257   1          do{
 258   2              data_buf[0] = SPI_Read_Reg(0x1F);
 259   2          }while(data_buf[0]&0x03);
 260   1      
 261   1          //////////////////////////////////////////////////
 262   1          SPI_Write_Reg(0x35,0x01); //testm for tx/temp
 263   1          SPI_Write_Reg(0x32,0xA0);
 264   1          SPI_Write_Reg(0x2a,0x04);
 265   1          SPI_Write_Reg(0x2a,0x00);
 266   1      
 267   1          SPI_Write_Reg(0x32,0x88);
 268   1          data_buf[0] = 0x01;
 269   1          data_buf[1] = 0x21;
 270   1          SPI_Write_Buffer(0x13, data_buf, 2);
 271   1          data_buf[0] = 0x01;
 272   1          data_buf[1] = 0x20;
 273   1          SPI_Write_Buffer(0x13, data_buf, 2);
 274   1          SPI_Write_Reg(0x35,0x00);  //exist testm
 275   1          ////////////////////////////////////////////////////
 276   1      
 277   1      }
 278          
 279          /*******************************************************************************
 280          * Function   :          BLE_Init
 281          * Parameter  :          void
 282          * Returns    :          void
 283          * Description:      power on .BLE must initnal reg .
 284          * Note:      :          delay 30ms .
 285          *******************************************************************************/
 286          void BLE_Init(void)
 287          {
 288   1          u8 status;
 289   1          u8 data_buf[4];
 290   1          u8 ble_Addr[6];
 291   1      
 292   1      
 293   1          SPI_Write_Reg(0x50, 0x51);
 294   1          SPI_Write_Reg(0x50, 0x53);
 295   1          SPI_Write_Reg(0x35, 0x00);
 296   1                SPI_Write_Reg(0x36, 0x8c);//Fabe
 297   1          SPI_Write_Reg(0x3D, 0x18);
 298   1          SPI_Write_Reg(0x50, 0x51);
 299   1      
 300   1          do{
 301   2              SPI_Write_Reg(0x50, 0x53);
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 6   

 302   2      
 303   2              data_buf[0] = 0;
 304   2              data_buf[1] = 0;
 305   2              data_buf[2] = 1;
 306   2              SPI_Write_Buffer(0x00, data_buf, 3);
 307   2      
 308   2              SPI_Write_Reg(0x36, 0x8e);
 309   2              SPI_Write_Reg(0x37, 0x88);
 310   2              SPI_Write_Reg(0x38, 0x88);
 311   2              SPI_Write_Reg(0x39, 0x8e);
 312   2      
 313   2              SPI_Write_Reg(0x50, 0x51);
 314   2      
 315   2              SPI_Read_Reg(0x1e);
 316   2      
 317   2              status = SPI_Read_Reg(CHIP_OK);
 318   2          }while(status != 0x80);
 319   1      
 320   1      #if 1 //debug
 321   1          //read chip version
 322   1              //status = SPI_Read_Reg(0x1e);
 323   1          //Uart_Send_String("chip version=");
 324   1      //    Uart_Send_Byte(status);
 325   1          //Uart_Send_String("\r\n");
 326   1      #endif
 327   1      
 328   1          SPI_Write_Reg(0X20, 0x78);//power down,tx, for hot reset
 329   1          SPI_Write_Reg(0X26, 0x06);//1Mbps
 330   1          SPI_Write_Reg(0X20, 0x7a);//power up
 331   1      
 332   1          SPI_Write_Reg(0x50, 0x56);
 333   1      
 334   1          BLE_Mode_Sleep();
 335   1      
 336   1      #if 1 //debug
 337   1          //read BLE address. BLE MAC Address
 338   1          SPI_Read_Buffer(0x08, ble_Addr, 6);
 339   1      
 340   1          //Uart_Send_String("BleAddr=");
 341   1          //Uart_Send_Byte(ble_Addr[5]);
 342   1          //Uart_Send_Byte(ble_Addr[4]);
 343   1          //Uart_Send_Byte(ble_Addr[3]);
 344   1          //Uart_Send_Byte(ble_Addr[2]);
 345   1          //Uart_Send_Byte(ble_Addr[1]);
 346   1          //Uart_Send_Byte(ble_Addr[0]);
 347   1          //Uart_Send_String("\r\n");
 348   1      #endif
 349   1      
 350   1      
 351   1          SPI_Write_Reg(0x50, 0x53);
 352   1      
 353   1          data_buf[0] = 0x7f;
 354   1          data_buf[1] = 0x80; //xocc
 355   1          SPI_Write_Buffer(0x14,data_buf,2);
 356   1      
 357   1          //set BLE TX Power
 358   1          data_buf[0] = 0x02;
 359   1          data_buf[1] = BLE_TX_POWER;
 360   1          SPI_Write_Buffer(0x0f,data_buf,2);
 361   1      
 362   1          data_buf[1] = SPI_Read_Reg(0x08);  //txgain
 363   1          if(0 == data_buf[1]){
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 7   

 364   2            data_buf[1] = TXGAIN_DFF;
 365   2          }
 366   1          data_buf[0] = 0xc0;
 367   1          data_buf[2] = 0x2D; //rx
 368   1          SPI_Write_Buffer(0x4, data_buf, 3);
 369   1      
 370   1      
 371   1          data_buf[0] = 0x80; //rx
 372   1          data_buf[1] = 0x00;
 373   1          SPI_Write_Buffer(0x0C, data_buf, 2);
 374   1      
 375   1          data_buf[0] = 0x81;
 376   1          data_buf[1] = 0x22;
 377   1          SPI_Write_Buffer(0x13, data_buf, 2);
 378   1      
 379   1          SPI_Write_Reg(0X21, 0x02);
 380   1          SPI_Write_Reg(0x3C, 0x30);
 381   1          SPI_Write_Reg(0x3E, 0x30);
 382   1      
 383   1          data_buf[0] = 0x38;
 384   1          data_buf[1] = 0x0F;
 385   1          data_buf[2] = 0x00; //gc
 386   1          SPI_Write_Buffer(0x02, data_buf, 3);
 387   1      
 388   1          data_buf[0] = 0x80;
 389   1          data_buf[1] = 0x70; //gain
 390   1          data_buf[2] = 0x21;
 391   1          data_buf[3] = 0x40; //rx
 392   1          SPI_Write_Buffer(0x0b, data_buf, 4);
 393   1      
 394   1          SPI_Write_Reg(0x29, 0x71); //gain
 395   1      
 396   1          data_buf[0] = 0x10;
 397   1          data_buf[1] = 0x02;
 398   1          SPI_Write_Buffer(0xA, data_buf, 2);
 399   1      
 400   1          data_buf[0] = 0x02;
 401   1          data_buf[1] = 0x12;
 402   1          SPI_Write_Buffer(0xD, data_buf, 2);
 403   1      
 404   1          data_buf[0] = 0x01;
 405   1          data_buf[1] = 0x07;
 406   1          SPI_Write_Buffer(0xE, data_buf, 2);
 407   1      
 408   1          SPI_Write_Reg(0x50, 0x56);
 409   1      }
 410          
 411          //2480MHz carrier, for xtal capacitor tuning
 412          //call this function after BLE_Init() in main()
 413          void Carrier(void)
 414          {
 415   1          unsigned long delay=0x14000;
 416   1          u8 data_buf[2] = {0xc0, 0x00};
 417   1      
 418   1          SPI_Write_Reg(0x50, 0x51);
 419   1          SPI_Write_Reg(0x50, 0x53);
 420   1      
 421   1          SPI_Write_Reg(0x3d, 0x1e);
 422   1          while(delay--);
 423   1      
 424   1          SPI_Write_Reg(0x50, 0x56);
 425   1          SPI_Write_Reg(0x20,0x0);
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 8   

 426   1      
 427   1          SPI_Write_Reg(0x50, 0x53);
 428   1          SPI_Write_Reg(0x36, 0x8c);  //
 429   1          SPI_Write_Reg(0x27,0x0F);
 430   1          SPI_Write_Buffer(0x4, data_buf, 2);
 431   1          data_buf[0] = 0x24;
 432   1          data_buf[1] = 0x2e;
 433   1          SPI_Write_Buffer(0x11, data_buf, 2);
 434   1          SPI_Write_Reg(0x50, 0x51);
 435   1      
 436   1          SPI_Write_Reg(0x21,0x00);
 437   1          SPI_Write_Reg(0x25,0x50);
 438   1          SPI_Write_Reg(0x24,0x00);
 439   1      
 440   1          SPI_Write_Reg(0x20,0x0e);
 441   1          SPI_Write_Reg(0x26,0x96); //for cont wave
 442   1          SPI_Write_Reg(0xe3,0xff);
 443   1      
 444   1          SPI_Write_Reg(0x50, 0x53);
 445   1          SPI_Write_Reg(0x36, 0x8e); //
 446   1      
 447   1          SPI_Write_Reg(0x50, 0x51);
 448   1          SPI_Write_Reg(0x26, 0x06);
 449   1          SPI_Write_Reg(0x26, 0x96);
 450   1      
 451   1          SPI_Write_Reg(0x50, 0x53);
 452   1      
 453   1          while(1){};
 454   1      }
 455          
 456          //16MHz output by IRQ pin, for xtal capacitor tuning
 457          void XOClockOutput(void)
 458          {
 459   1          u8 data_buf[3];
 460   1      
 461   1          SPI_Write_Reg(0x50, 0x51);
 462   1          SPI_Write_Reg(0x50, 0x53);
 463   1      
 464   1          SPI_Write_Reg(0x35,0x01);
 465   1          data_buf[0] = 0x93;
 466   1          data_buf[1] = 0x00;
 467   1          SPI_Write_Buffer(0x14, data_buf, 2);
 468   1          SPI_Write_Reg(0x3e,0x30);
 469   1          SPI_Write_Reg(0x31,0x00);
 470   1          SPI_Write_Reg(0x3b,0x48);
 471   1          data_buf[0] = 0x00;
 472   1          data_buf[1] = 0x00;
 473   1          data_buf[2] = 0x15;
 474   1          SPI_Write_Buffer(0x12, data_buf, 3);
 475   1      
 476   1          while(1){};
 477   1      }
 478          
 479          /*******************************************************************************
 480          * Function   :          BLE_TRX
 481          * Parameter  :          txcnt, rxcnt
 482          * Returns    :          void
 483          * Description:      Beacon data .process .
 484          * Note:      :
 485          *******************************************************************************/
 486          sbit LED1 = P1^7;
 487          sbit LED2 = P1^6;
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 9   

 488          
 489          void BLE_TRX(unsigned short value)
 490          {
 491   1          u8 status = 0;
 492   1          u8 ch = 37;
 493   1          u8 data_buf[2];
 494   1          u8 tmp_cnt = txcnt+rxcnt;
 495   1          u8 len_pdu = 0;
 496   1          u8 loop = 0;
 497   1      
 498   1          if(tmp_cnt == 0) return;
 499   1      
 500   1          BLE_Mode_PwrUp();
 501   1      
 502   1      #if 1  //if adv_data no change, can move this block to the end of BLE_Init()
 503   1          //set BLE TX default channel:37.38.39
 504   1          SPI_Write_Reg(CH_NO|0X20, ch);
 505   1      
 506   1          //BLT FIFO write adv_data . max len:31 byte
 507   1              adv_data[5] = (u8)((value >> 8) & 0xFF);
 508   1              adv_data[6] = (u8)(value & 0xFF);
 509   1          SPI_Write_Buffer(W_TX_PAYLOAD, adv_data, LEN_DATA);
 510   1      
 511   1          //PDU TYPE: 2  non-connectable undirected advertising . tx add:random address
 512   1          //set BLT PDU length:adv_data+6 mac adress.
 513   1          data_buf[0] = 0x02;
 514   1          data_buf[1] = LEN_DATA+LEN_BLE_ADDR;
 515   1          SPI_Write_Buffer(ADV_HDR_TX, data_buf, 2);
 516   1      
 517   1          //clear all interrupt
 518   1          data_buf[0] = 0xFF;
 519   1          data_buf[1] = 0x80;
 520   1          SPI_Write_Buffer(INT_FLAG, data_buf, 2);
 521   1      #endif
 522   1      
 523   1          BLE_Mode_Wakeup();
 524   1      
 525   1          BLE_Set_TimeOut(BLE_RX_TIMEOUT);
 526   1          tick = BLE_GUARD_TIME;
 527   1      
 528   1          while(1)
 529   1          {
 530   2              //BLE IRQ LOW
 531   2              if(mcu_get_irq())               //(IRQ == 0) //(!BLE_IRQ_GET())
 532   2              {
 533   3                  //clear interrupt flag
 534   3                  status = SPI_Read_Reg(INT_FLAG);
 535   3                  SPI_Write_Reg(INT_FLAG|0X20, status);
 536   3                  //Uart_Send_Byte(status); //debug
 537   3      
 538   3                  if(INT_TYPE_WAKEUP & status)//wakeup
 539   3                  {
 540   4                      if(txcnt > 0){
 541   5                          txcnt --;
 542   5                          SPI_Write_Reg(MODE_TYPE|0X20, RADIO_MODE_ADV_TX);
 543   5                          BLE_Set_StartTime(BLE_START_TIME);
 544   5                      }else if(rxcnt > 0){
 545   5                          rxcnt --;
 546   5                          SPI_Write_Reg(MODE_TYPE|0X20, RADIO_MODE_ADV_RX);
 547   5                          BLE_Set_StartTime(BLE_START_TIME);
 548   5                      }
 549   4                      continue; //goto while(1)
C51 COMPILER V9.56.0.0   MG127                                                             09/26/2018 16:11:31 PAGE 10  

 550   4                  }
 551   3      
 552   3                  BLE_Mode_Sleep();
 553   3      
 554   3                  if(INT_TYPE_PDU_OK & status){ //only happen in rx application, no need porting in tx only appl
             -ication
 555   4                      //LED_RED_ON(); //debug
 556   4                      BLE_Get_Pdu(rx_buf, &len_pdu);
 557   4      #if 1 //debug
 558   4                      //Uart_Send_String("\r\nRX: ");
 559   4                      if(rx_buf[8] == 0x02 && rx_buf[9] == 0x01 && rx_buf[10] == 0x04){
 560   5                          LED1 = 1;
 561   5                          for(loop=0; loop<len_pdu; loop++)
 562   5                              iot_buf[loop] = rx_buf[loop];
 563   5                      }else
 564   4                          LED1 = 0;
 565   4      #endif
 566   4                  }else if(INT_TYPE_TX_START & status){ //only happen in tx application
 567   4                      //LED_GREEN_ON(); //debug
 568   4                  }
 569   3      
 570   3                  if(INT_TYPE_SLEEP & status)//sleep
 571   3                  {
 572   4                      //LED_GREEN_OFF(); //debug
 573   4                      //LED_RED_OFF();  //debug
 574   4                      tick = BLE_GUARD_TIME;
 575   4      
 576   4                      //BLE channel
 577   4                      if (++ch > 39){
 578   5                          ch = 37;
 579   5                      }
 580   4                      SPI_Write_Reg(CH_NO|0X20, ch);
 581   4      
 582   4                      tmp_cnt --;
 583   4                      if(tmp_cnt == 0){
 584   5                          BLE_Mode_PwrDn();
 585   5                          break; //exit from while(1)
 586   5                      }
 587   4                      else
 588   4                          BLE_Mode_Wakeup();
 589   4                  }
 590   3      
 591   3              }
 592   2              else if(tick == 0){ //robustness, in case no int
 593   3                  BLE_Mode_Sleep();
 594   3              }
 595   2      
 596   2          }
 597   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1948    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =    112      63
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
